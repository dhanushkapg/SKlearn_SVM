# -*- coding: utf-8 -*-
"""Data5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PS894K-Eb2jEpZ-dTvZTWcBlLrtRiLGb
"""

!pip install sklearn

import numpy as np
from sklearn.datasets import load_digits # load dataset from sklearn

dataSet=load_digits()
#print(dataSet.data)
#print(dataSet.target)
print(dataSet.images.shape)

n=52
import matplotlib.pyplot as plt
plt.gray()
plt.matshow(dataSet.images[n])
plt.show()

dataSet.images[n]

dataImageLength = len(dataSet.images)
X=dataSet.images.reshape((dataImageLength ,-1))
print(X) # Print all the data as two dimentional array

Y=dataSet.target
print(Y)

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.25,random_state=0)
print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

from sklearn import svm  # import sklearn vector machine algorithm and create model from that
model=svm.SVC(gamma=0.01)

model.fit(X_train,y_train)

y_pred=model.predict(X_test)# create predition data for Y

from sklearn.metrics import accuracy_score
print('accuracy is the SVM is, {0}%'.format(accuracy_score(y_pred,y_test)*100))

n=50
result=model.predict(dataSet.images[n].reshape((1,-1)))  
print(result)
plt.gray()
plt.matshow(dataSet.images[n])
plt.show()

dataSet.images[n]

model1=svm.SVC()
model2=svm.SVC(C=2.0)
model3=svm.SVC(kernel='rbf')
model4=svm.SVC(gamma=0.001)
model1.fit(X_train,y_train)  
model2.fit(X_train,y_train)  
model3.fit(X_train,y_train)  
model4.fit(X_train,y_train) 
y_pred1=model1.predict(X_test)
y_pred2=model2.predict(X_test)
y_pred3=model3.predict(X_test)
y_pred4=model4.predict(X_test)
from sklearn.metrics import accuracy_score
print('accuracy is the SVM is, {0}%'.format(accuracy_score(y_pred1,y_test)*100))
print('accuracy is the SVM is, {0}%'.format(accuracy_score(y_pred2,y_test)*100))
print('accuracy is the SVM is, {0}%'.format(accuracy_score(y_pred3,y_test)*100))
print('accuracy is the SVM is, {0}%'.format(accuracy_score(y_pred4,y_test)*100))